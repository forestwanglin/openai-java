package xyz.felh.openai.chat;


import com.fasterxml.jackson.annotation.JsonValue;
import lombok.*;
import xyz.felh.openai.IOpenAiBean;
import xyz.felh.openai.chat.tool.ToolCall;
import xyz.felh.openai.utils.Preconditions;

import java.util.ArrayList;
import java.util.List;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ChatMessage implements IOpenAiBean {

    public ChatMessage(@NonNull ChatMessageRole role, Object content) {
        this.role = role;
        this.content = content;
    }

    /**
     * Must be either 'system', 'user', 'assistant', or 'tool'.<br>
     * You may use {@link ChatMessage} enum.
     */
    @NonNull
    private ChatMessageRole role;

    /**
     * The contents of the message
     * <p>
     * 1. role=system, string or null, required<br/>
     * 2. role=user, string or array, required<br/>
     * 3. role=assistant, string or null, required<br/>
     * 4. role=tool, string or null, required<br/>
     */
    private Object content;

    /**
     * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
     * <p>
     * Optional
     * <p>
     * Do not provide this field when role is tool.
     */
    private String name;

    /**
     * The tool calls generated by the model, such as function calls.
     * <p>
     * Array, Optional
     * It is provided when role is assistant
     * <p>
     * See {@link ToolCall}
     */
    private List<ToolCall> toolCalls;

    /**
     * Tool call that this message is responding to.
     * <p>
     * String, Required
     * It is provided when role is tool
     */
    private String toolCallId;

    public void addTextToContent(String text) {
        List<ContentItem> list = getListExtractFromContent();
        list.add(ContentItem.buildText(text));
        this.content = list;
    }

    public void addImageBase64ToContent(String base64) {
        addImageBase64ToContent(base64, ImageUrlDetail.LOW);
    }

    public void addImageBase64ToContent(String base64, ImageUrlDetail detail) {
        List<ContentItem> list = getListExtractFromContent();
        list.add(ContentItem.buildImageWithBase64(base64, detail));
        this.content = list;
    }

    public void addImageUrlToContent(String imageUrl) {
        addImageUrlToContent(imageUrl, ImageUrlDetail.LOW);
    }

    public void addImageUrlToContent(String imageUrl, ImageUrlDetail detail) {
        List<ContentItem> list = getListExtractFromContent();
        list.add(ContentItem.buildImageWithUrl(imageUrl, detail));
        this.content = list;
    }

    private List<ContentItem> getListExtractFromContent() {
        if (Preconditions.isNotBlank(content)) {
            if (content instanceof List<?>) {
                return ((List<ContentItem>) content);
            }
        }
        return new ArrayList<>();
    }

    @Data
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    public static class ImageUrl implements IOpenAiBean {
        /**
         * Either a URL of the image or the base64 encoded image data.
         */
        @NonNull
        private String url;
        /**
         * Specifies the detail level of the image.
         * <p>
         * Optional, Defaults to auto
         */
        private ImageUrlDetail detail;
    }

    @Data
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    public static class ContentItem implements IOpenAiBean {

        /**
         * The type of the content part.
         */
        private ContentType type;

        /**
         * The text content.
         */
        private String text;

        /**
         * Image url
         */
        private ImageUrl imageUrl;

        private static ContentItem buildText(String text) {
            return ContentItem.builder().type(ContentType.TEXT).text(text).build();
        }

        // 包括 data:image/jpeg;base64,
        private static ContentItem buildImageWithBase64(String base64, ImageUrlDetail detail) {
            return ContentItem.builder()
                    .type(ContentType.IMAGE_URL)
                    .imageUrl(ImageUrl.builder().url(String.format("f\"%s\"", base64)).detail(detail).build())
                    .build();
        }

        private static ContentItem buildImageWithUrl(String imageUrl, ImageUrlDetail detail) {
            return ContentItem.builder()
                    .type(ContentType.IMAGE_URL)
                    .imageUrl(ImageUrl.builder().url(imageUrl).detail(detail).build())
                    .build();
        }
    }

    public enum ContentType {
        TEXT("text"),
        IMAGE_URL("image_url");

        private final String value;

        ContentType(final String value) {
            this.value = value;
        }

        @JsonValue
        public String value() {
            return value;
        }
    }

    public enum ImageUrlDetail {
        LOW("low"),
        HIGH("high");

        private final String value;

        ImageUrlDetail(final String value) {
            this.value = value;
        }

        @JsonValue
        public String value() {
            return value;
        }
    }

}
